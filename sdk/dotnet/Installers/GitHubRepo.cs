// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pde.Installers
{
    [PdeResourceType("pde:installers:GitHubRepo")]
    public partial class GitHubRepo : global::Pulumi.CustomResource
    {
        [Output("abs_folder_name")]
        public Output<string> Abs_folder_name { get; private set; } = null!;

        [Output("branch")]
        public Output<string?> Branch { get; private set; } = null!;

        [Output("environment")]
        public Output<ImmutableDictionary<string, string>?> Environment { get; private set; } = null!;

        [Output("folder_name")]
        public Output<string?> Folder_name { get; private set; } = null!;

        [Output("install_commands")]
        public Output<ImmutableArray<string>> Install_commands { get; private set; } = null!;

        [Output("interpreter")]
        public Output<ImmutableArray<string>> Interpreter { get; private set; } = null!;

        [Output("org")]
        public Output<string> Org { get; private set; } = null!;

        [Output("repo")]
        public Output<string> Repo { get; private set; } = null!;

        [Output("uninstall_commands")]
        public Output<ImmutableArray<string>> Uninstall_commands { get; private set; } = null!;

        [Output("update_commands")]
        public Output<ImmutableArray<string>> Update_commands { get; private set; } = null!;

        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a GitHubRepo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitHubRepo(string name, GitHubRepoArgs args, CustomResourceOptions? options = null)
            : base("pde:installers:GitHubRepo", name, args ?? new GitHubRepoArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitHubRepo(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("pde:installers:GitHubRepo", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitHubRepo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitHubRepo Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new GitHubRepo(name, id, options);
        }
    }

    public sealed class GitHubRepoArgs : global::Pulumi.ResourceArgs
    {
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        [Input("folder_name")]
        public Input<string>? Folder_name { get; set; }

        [Input("install_commands")]
        private InputList<string>? _install_commands;
        public InputList<string> Install_commands
        {
            get => _install_commands ?? (_install_commands = new InputList<string>());
            set => _install_commands = value;
        }

        [Input("org", required: true)]
        public Input<string> Org { get; set; } = null!;

        [Input("repo", required: true)]
        public Input<string> Repo { get; set; } = null!;

        [Input("uninstall_commands")]
        private InputList<string>? _uninstall_commands;
        public InputList<string> Uninstall_commands
        {
            get => _uninstall_commands ?? (_uninstall_commands = new InputList<string>());
            set => _uninstall_commands = value;
        }

        [Input("update_commands")]
        private InputList<string>? _update_commands;
        public InputList<string> Update_commands
        {
            get => _update_commands ?? (_update_commands = new InputList<string>());
            set => _update_commands = value;
        }

        public GitHubRepoArgs()
        {
        }
        public static new GitHubRepoArgs Empty => new GitHubRepoArgs();
    }
}
