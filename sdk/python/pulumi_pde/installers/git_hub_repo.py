# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GitHubRepoArgs', 'GitHubRepo']

@pulumi.input_type
class GitHubRepoArgs:
    def __init__(__self__, *,
                 org: pulumi.Input[str],
                 repo: pulumi.Input[str],
                 branch: Optional[pulumi.Input[str]] = None,
                 folder_name: Optional[pulumi.Input[str]] = None,
                 install_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 uninstall_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a GitHubRepo resource.
        """
        pulumi.set(__self__, "org", org)
        pulumi.set(__self__, "repo", repo)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if folder_name is not None:
            pulumi.set(__self__, "folder_name", folder_name)
        if install_commands is not None:
            pulumi.set(__self__, "install_commands", install_commands)
        if uninstall_commands is not None:
            pulumi.set(__self__, "uninstall_commands", uninstall_commands)
        if update_commands is not None:
            pulumi.set(__self__, "update_commands", update_commands)

    @property
    @pulumi.getter
    def org(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: pulumi.Input[str]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="folderName")
    def folder_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "folder_name")

    @folder_name.setter
    def folder_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_name", value)

    @property
    @pulumi.getter(name="installCommands")
    def install_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "install_commands")

    @install_commands.setter
    def install_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "install_commands", value)

    @property
    @pulumi.getter(name="uninstallCommands")
    def uninstall_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "uninstall_commands")

    @uninstall_commands.setter
    def uninstall_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uninstall_commands", value)

    @property
    @pulumi.getter(name="updateCommands")
    def update_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "update_commands")

    @update_commands.setter
    def update_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "update_commands", value)


class GitHubRepo(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch: Optional[pulumi.Input[str]] = None,
                 folder_name: Optional[pulumi.Input[str]] = None,
                 install_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 uninstall_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a GitHubRepo resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GitHubRepoArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a GitHubRepo resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param GitHubRepoArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GitHubRepoArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch: Optional[pulumi.Input[str]] = None,
                 folder_name: Optional[pulumi.Input[str]] = None,
                 install_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 uninstall_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GitHubRepoArgs.__new__(GitHubRepoArgs)

            __props__.__dict__["branch"] = branch
            __props__.__dict__["folder_name"] = folder_name
            __props__.__dict__["install_commands"] = install_commands
            if org is None and not opts.urn:
                raise TypeError("Missing required property 'org'")
            __props__.__dict__["org"] = org
            if repo is None and not opts.urn:
                raise TypeError("Missing required property 'repo'")
            __props__.__dict__["repo"] = repo
            __props__.__dict__["uninstall_commands"] = uninstall_commands
            __props__.__dict__["update_commands"] = update_commands
            __props__.__dict__["abs_folder_name"] = None
            __props__.__dict__["environment"] = None
            __props__.__dict__["interpreter"] = None
            __props__.__dict__["output_branch"] = None
            __props__.__dict__["version"] = None
        super(GitHubRepo, __self__).__init__(
            'pde:installers:GitHubRepo',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'GitHubRepo':
        """
        Get an existing GitHubRepo resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = GitHubRepoArgs.__new__(GitHubRepoArgs)

        __props__.__dict__["abs_folder_name"] = None
        __props__.__dict__["branch"] = None
        __props__.__dict__["environment"] = None
        __props__.__dict__["folder_name"] = None
        __props__.__dict__["install_commands"] = None
        __props__.__dict__["interpreter"] = None
        __props__.__dict__["org"] = None
        __props__.__dict__["output_branch"] = None
        __props__.__dict__["repo"] = None
        __props__.__dict__["uninstall_commands"] = None
        __props__.__dict__["update_commands"] = None
        __props__.__dict__["version"] = None
        return GitHubRepo(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="absFolderName")
    def abs_folder_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "abs_folder_name")

    @property
    @pulumi.getter
    def branch(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="folderName")
    def folder_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "folder_name")

    @property
    @pulumi.getter(name="installCommands")
    def install_commands(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "install_commands")

    @property
    @pulumi.getter
    def interpreter(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "interpreter")

    @property
    @pulumi.getter
    def org(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="outputBranch")
    def output_branch(self) -> pulumi.Output[str]:
        return pulumi.get(self, "output_branch")

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Output[str]:
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter(name="uninstallCommands")
    def uninstall_commands(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "uninstall_commands")

    @property
    @pulumi.getter(name="updateCommands")
    def update_commands(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "update_commands")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "version")

