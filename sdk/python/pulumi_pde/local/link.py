# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LinkArgs', 'Link']

@pulumi.input_type
class LinkArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[str],
                 target: pulumi.Input[str],
                 overwrite: Optional[pulumi.Input[bool]] = None,
                 recursive: Optional[pulumi.Input[bool]] = None,
                 retain: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Link resource.
        """
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        if overwrite is not None:
            pulumi.set(__self__, "overwrite", overwrite)
        if recursive is not None:
            pulumi.set(__self__, "recursive", recursive)
        if retain is not None:
            pulumi.set(__self__, "retain", retain)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def overwrite(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "overwrite")

    @overwrite.setter
    def overwrite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "overwrite", value)

    @property
    @pulumi.getter
    def recursive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recursive")

    @recursive.setter
    def recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recursive", value)

    @property
    @pulumi.getter
    def retain(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "retain")

    @retain.setter
    def retain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retain", value)


class Link(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 overwrite: Optional[pulumi.Input[bool]] = None,
                 recursive: Optional[pulumi.Input[bool]] = None,
                 retain: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Link resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Link resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 overwrite: Optional[pulumi.Input[bool]] = None,
                 recursive: Optional[pulumi.Input[bool]] = None,
                 retain: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LinkArgs.__new__(LinkArgs)

            __props__.__dict__["overwrite"] = overwrite
            __props__.__dict__["recursive"] = recursive
            __props__.__dict__["retain"] = retain
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            if target is None and not opts.urn:
                raise TypeError("Missing required property 'target'")
            __props__.__dict__["target"] = target
            __props__.__dict__["is_dir"] = None
            __props__.__dict__["linked"] = None
            __props__.__dict__["targets"] = None
        super(Link, __self__).__init__(
            'pde:local:Link',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Link':
        """
        Get an existing Link resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = LinkArgs.__new__(LinkArgs)

        __props__.__dict__["is_dir"] = None
        __props__.__dict__["linked"] = None
        __props__.__dict__["overwrite"] = None
        __props__.__dict__["recursive"] = None
        __props__.__dict__["retain"] = None
        __props__.__dict__["source"] = None
        __props__.__dict__["target"] = None
        __props__.__dict__["targets"] = None
        return Link(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="isDir")
    def is_dir(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_dir")

    @property
    @pulumi.getter
    def linked(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "linked")

    @property
    @pulumi.getter
    def overwrite(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "overwrite")

    @property
    @pulumi.getter
    def recursive(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "recursive")

    @property
    @pulumi.getter
    def retain(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "retain")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> pulumi.Output[str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "targets")

