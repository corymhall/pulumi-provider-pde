// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package installers

import (
	"context"
	"reflect"

	"errors"
	"github.com/corymhall/pulumi-provider-pde/sdk/go/pde/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Install a program from a GitHub repository
type GitHubRepo struct {
	pulumi.CustomResourceState

	// The absolute path to the folder the repo was cloned to
	AbsFolderName pulumi.StringOutput `pulumi:"absFolderName"`
	// The branch to clone from. Default to main
	Branch pulumi.StringPtrOutput `pulumi:"branch"`
	// The environment variables to set when running the commands
	Environment pulumi.StringMapOutput `pulumi:"environment"`
	// The folder to clone the repo to. By default this is will be $HOME/$REPO_NAME
	FolderName pulumi.StringPtrOutput `pulumi:"folderName"`
	// The commands to run to install the program
	InstallCommands pulumi.StringArrayOutput `pulumi:"installCommands"`
	// The interpreter to use to run the commands. Defaults to ['/bin/sh', '-c']
	Interpreter pulumi.StringArrayOutput `pulumi:"interpreter"`
	// The GitHub organization the repo belongs to
	Org pulumi.StringOutput `pulumi:"org"`
	// The GitHub repository name
	Repo pulumi.StringOutput `pulumi:"repo"`
	// Optional Commands to run to uninstall the program
	UninstallCommands pulumi.StringArrayOutput `pulumi:"uninstallCommands"`
	// Optional Commands to run to update the program
	UpdateCommands pulumi.StringArrayOutput `pulumi:"updateCommands"`
	Version        pulumi.StringPtrOutput   `pulumi:"version"`
}

// NewGitHubRepo registers a new resource with the given unique name, arguments, and options.
func NewGitHubRepo(ctx *pulumi.Context,
	name string, args *GitHubRepoArgs, opts ...pulumi.ResourceOption) (*GitHubRepo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Org == nil {
		return nil, errors.New("invalid value for required argument 'Org'")
	}
	if args.Repo == nil {
		return nil, errors.New("invalid value for required argument 'Repo'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitHubRepo
	err := ctx.RegisterResource("pde:installers:GitHubRepo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitHubRepo gets an existing GitHubRepo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitHubRepo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitHubRepoState, opts ...pulumi.ResourceOption) (*GitHubRepo, error) {
	var resource GitHubRepo
	err := ctx.ReadResource("pde:installers:GitHubRepo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitHubRepo resources.
type gitHubRepoState struct {
}

type GitHubRepoState struct {
}

func (GitHubRepoState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitHubRepoState)(nil)).Elem()
}

type gitHubRepoArgs struct {
	// The branch to clone from. Default to main
	Branch *string `pulumi:"branch"`
	// The folder to clone the repo to. By default this is will be $HOME/$REPO_NAME
	FolderName *string `pulumi:"folderName"`
	// The commands to run to install the program
	InstallCommands []string `pulumi:"installCommands"`
	// The GitHub organization the repo belongs to
	Org string `pulumi:"org"`
	// The GitHub repository name
	Repo string `pulumi:"repo"`
	// Optional Commands to run to uninstall the program
	UninstallCommands []string `pulumi:"uninstallCommands"`
	// Optional Commands to run to update the program
	UpdateCommands []string `pulumi:"updateCommands"`
	Version        *string  `pulumi:"version"`
}

// The set of arguments for constructing a GitHubRepo resource.
type GitHubRepoArgs struct {
	// The branch to clone from. Default to main
	Branch pulumi.StringPtrInput
	// The folder to clone the repo to. By default this is will be $HOME/$REPO_NAME
	FolderName pulumi.StringPtrInput
	// The commands to run to install the program
	InstallCommands pulumi.StringArrayInput
	// The GitHub organization the repo belongs to
	Org pulumi.StringInput
	// The GitHub repository name
	Repo pulumi.StringInput
	// Optional Commands to run to uninstall the program
	UninstallCommands pulumi.StringArrayInput
	// Optional Commands to run to update the program
	UpdateCommands pulumi.StringArrayInput
	Version        pulumi.StringPtrInput
}

func (GitHubRepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitHubRepoArgs)(nil)).Elem()
}

type GitHubRepoInput interface {
	pulumi.Input

	ToGitHubRepoOutput() GitHubRepoOutput
	ToGitHubRepoOutputWithContext(ctx context.Context) GitHubRepoOutput
}

func (*GitHubRepo) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubRepo)(nil)).Elem()
}

func (i *GitHubRepo) ToGitHubRepoOutput() GitHubRepoOutput {
	return i.ToGitHubRepoOutputWithContext(context.Background())
}

func (i *GitHubRepo) ToGitHubRepoOutputWithContext(ctx context.Context) GitHubRepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubRepoOutput)
}

// GitHubRepoArrayInput is an input type that accepts GitHubRepoArray and GitHubRepoArrayOutput values.
// You can construct a concrete instance of `GitHubRepoArrayInput` via:
//
//	GitHubRepoArray{ GitHubRepoArgs{...} }
type GitHubRepoArrayInput interface {
	pulumi.Input

	ToGitHubRepoArrayOutput() GitHubRepoArrayOutput
	ToGitHubRepoArrayOutputWithContext(context.Context) GitHubRepoArrayOutput
}

type GitHubRepoArray []GitHubRepoInput

func (GitHubRepoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitHubRepo)(nil)).Elem()
}

func (i GitHubRepoArray) ToGitHubRepoArrayOutput() GitHubRepoArrayOutput {
	return i.ToGitHubRepoArrayOutputWithContext(context.Background())
}

func (i GitHubRepoArray) ToGitHubRepoArrayOutputWithContext(ctx context.Context) GitHubRepoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubRepoArrayOutput)
}

// GitHubRepoMapInput is an input type that accepts GitHubRepoMap and GitHubRepoMapOutput values.
// You can construct a concrete instance of `GitHubRepoMapInput` via:
//
//	GitHubRepoMap{ "key": GitHubRepoArgs{...} }
type GitHubRepoMapInput interface {
	pulumi.Input

	ToGitHubRepoMapOutput() GitHubRepoMapOutput
	ToGitHubRepoMapOutputWithContext(context.Context) GitHubRepoMapOutput
}

type GitHubRepoMap map[string]GitHubRepoInput

func (GitHubRepoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitHubRepo)(nil)).Elem()
}

func (i GitHubRepoMap) ToGitHubRepoMapOutput() GitHubRepoMapOutput {
	return i.ToGitHubRepoMapOutputWithContext(context.Background())
}

func (i GitHubRepoMap) ToGitHubRepoMapOutputWithContext(ctx context.Context) GitHubRepoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubRepoMapOutput)
}

type GitHubRepoOutput struct{ *pulumi.OutputState }

func (GitHubRepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubRepo)(nil)).Elem()
}

func (o GitHubRepoOutput) ToGitHubRepoOutput() GitHubRepoOutput {
	return o
}

func (o GitHubRepoOutput) ToGitHubRepoOutputWithContext(ctx context.Context) GitHubRepoOutput {
	return o
}

// The absolute path to the folder the repo was cloned to
func (o GitHubRepoOutput) AbsFolderName() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringOutput { return v.AbsFolderName }).(pulumi.StringOutput)
}

// The branch to clone from. Default to main
func (o GitHubRepoOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringPtrOutput { return v.Branch }).(pulumi.StringPtrOutput)
}

// The environment variables to set when running the commands
func (o GitHubRepoOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

// The folder to clone the repo to. By default this is will be $HOME/$REPO_NAME
func (o GitHubRepoOutput) FolderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringPtrOutput { return v.FolderName }).(pulumi.StringPtrOutput)
}

// The commands to run to install the program
func (o GitHubRepoOutput) InstallCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringArrayOutput { return v.InstallCommands }).(pulumi.StringArrayOutput)
}

// The interpreter to use to run the commands. Defaults to ['/bin/sh', '-c']
func (o GitHubRepoOutput) Interpreter() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringArrayOutput { return v.Interpreter }).(pulumi.StringArrayOutput)
}

// The GitHub organization the repo belongs to
func (o GitHubRepoOutput) Org() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringOutput { return v.Org }).(pulumi.StringOutput)
}

// The GitHub repository name
func (o GitHubRepoOutput) Repo() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringOutput { return v.Repo }).(pulumi.StringOutput)
}

// Optional Commands to run to uninstall the program
func (o GitHubRepoOutput) UninstallCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringArrayOutput { return v.UninstallCommands }).(pulumi.StringArrayOutput)
}

// Optional Commands to run to update the program
func (o GitHubRepoOutput) UpdateCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringArrayOutput { return v.UpdateCommands }).(pulumi.StringArrayOutput)
}

func (o GitHubRepoOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type GitHubRepoArrayOutput struct{ *pulumi.OutputState }

func (GitHubRepoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitHubRepo)(nil)).Elem()
}

func (o GitHubRepoArrayOutput) ToGitHubRepoArrayOutput() GitHubRepoArrayOutput {
	return o
}

func (o GitHubRepoArrayOutput) ToGitHubRepoArrayOutputWithContext(ctx context.Context) GitHubRepoArrayOutput {
	return o
}

func (o GitHubRepoArrayOutput) Index(i pulumi.IntInput) GitHubRepoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitHubRepo {
		return vs[0].([]*GitHubRepo)[vs[1].(int)]
	}).(GitHubRepoOutput)
}

type GitHubRepoMapOutput struct{ *pulumi.OutputState }

func (GitHubRepoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitHubRepo)(nil)).Elem()
}

func (o GitHubRepoMapOutput) ToGitHubRepoMapOutput() GitHubRepoMapOutput {
	return o
}

func (o GitHubRepoMapOutput) ToGitHubRepoMapOutputWithContext(ctx context.Context) GitHubRepoMapOutput {
	return o
}

func (o GitHubRepoMapOutput) MapIndex(k pulumi.StringInput) GitHubRepoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitHubRepo {
		return vs[0].(map[string]*GitHubRepo)[vs[1].(string)]
	}).(GitHubRepoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubRepoInput)(nil)).Elem(), &GitHubRepo{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubRepoArrayInput)(nil)).Elem(), GitHubRepoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubRepoMapInput)(nil)).Elem(), GitHubRepoMap{})
	pulumi.RegisterOutputType(GitHubRepoOutput{})
	pulumi.RegisterOutputType(GitHubRepoArrayOutput{})
	pulumi.RegisterOutputType(GitHubRepoMapOutput{})
}
