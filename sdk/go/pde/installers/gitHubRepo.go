// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package installers

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

type GitHubRepo struct {
	pulumi.CustomResourceState

	Abs_folder_name    pulumi.StringOutput      `pulumi:"abs_folder_name"`
	Branch             pulumi.StringPtrOutput   `pulumi:"branch"`
	Environment        pulumi.StringMapOutput   `pulumi:"environment"`
	Folder_name        pulumi.StringPtrOutput   `pulumi:"folder_name"`
	Install_commands   pulumi.StringArrayOutput `pulumi:"install_commands"`
	Interpreter        pulumi.StringArrayOutput `pulumi:"interpreter"`
	Org                pulumi.StringOutput      `pulumi:"org"`
	Repo               pulumi.StringOutput      `pulumi:"repo"`
	Uninstall_commands pulumi.StringArrayOutput `pulumi:"uninstall_commands"`
	Update_commands    pulumi.StringArrayOutput `pulumi:"update_commands"`
	Version            pulumi.StringOutput      `pulumi:"version"`
}

// NewGitHubRepo registers a new resource with the given unique name, arguments, and options.
func NewGitHubRepo(ctx *pulumi.Context,
	name string, args *GitHubRepoArgs, opts ...pulumi.ResourceOption) (*GitHubRepo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Org == nil {
		return nil, errors.New("invalid value for required argument 'Org'")
	}
	if args.Repo == nil {
		return nil, errors.New("invalid value for required argument 'Repo'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitHubRepo
	err := ctx.RegisterResource("pde:installers:GitHubRepo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitHubRepo gets an existing GitHubRepo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitHubRepo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitHubRepoState, opts ...pulumi.ResourceOption) (*GitHubRepo, error) {
	var resource GitHubRepo
	err := ctx.ReadResource("pde:installers:GitHubRepo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitHubRepo resources.
type gitHubRepoState struct {
}

type GitHubRepoState struct {
}

func (GitHubRepoState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitHubRepoState)(nil)).Elem()
}

type gitHubRepoArgs struct {
	Branch             *string  `pulumi:"branch"`
	Folder_name        *string  `pulumi:"folder_name"`
	Install_commands   []string `pulumi:"install_commands"`
	Org                string   `pulumi:"org"`
	Repo               string   `pulumi:"repo"`
	Uninstall_commands []string `pulumi:"uninstall_commands"`
	Update_commands    []string `pulumi:"update_commands"`
}

// The set of arguments for constructing a GitHubRepo resource.
type GitHubRepoArgs struct {
	Branch             pulumi.StringPtrInput
	Folder_name        pulumi.StringPtrInput
	Install_commands   pulumi.StringArrayInput
	Org                pulumi.StringInput
	Repo               pulumi.StringInput
	Uninstall_commands pulumi.StringArrayInput
	Update_commands    pulumi.StringArrayInput
}

func (GitHubRepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitHubRepoArgs)(nil)).Elem()
}

type GitHubRepoInput interface {
	pulumi.Input

	ToGitHubRepoOutput() GitHubRepoOutput
	ToGitHubRepoOutputWithContext(ctx context.Context) GitHubRepoOutput
}

func (*GitHubRepo) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubRepo)(nil)).Elem()
}

func (i *GitHubRepo) ToGitHubRepoOutput() GitHubRepoOutput {
	return i.ToGitHubRepoOutputWithContext(context.Background())
}

func (i *GitHubRepo) ToGitHubRepoOutputWithContext(ctx context.Context) GitHubRepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubRepoOutput)
}

type GitHubRepoOutput struct{ *pulumi.OutputState }

func (GitHubRepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubRepo)(nil)).Elem()
}

func (o GitHubRepoOutput) ToGitHubRepoOutput() GitHubRepoOutput {
	return o
}

func (o GitHubRepoOutput) ToGitHubRepoOutputWithContext(ctx context.Context) GitHubRepoOutput {
	return o
}

func (o GitHubRepoOutput) Abs_folder_name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringOutput { return v.Abs_folder_name }).(pulumi.StringOutput)
}

func (o GitHubRepoOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringPtrOutput { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o GitHubRepoOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

func (o GitHubRepoOutput) Folder_name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringPtrOutput { return v.Folder_name }).(pulumi.StringPtrOutput)
}

func (o GitHubRepoOutput) Install_commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringArrayOutput { return v.Install_commands }).(pulumi.StringArrayOutput)
}

func (o GitHubRepoOutput) Interpreter() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringArrayOutput { return v.Interpreter }).(pulumi.StringArrayOutput)
}

func (o GitHubRepoOutput) Org() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringOutput { return v.Org }).(pulumi.StringOutput)
}

func (o GitHubRepoOutput) Repo() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringOutput { return v.Repo }).(pulumi.StringOutput)
}

func (o GitHubRepoOutput) Uninstall_commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringArrayOutput { return v.Uninstall_commands }).(pulumi.StringArrayOutput)
}

func (o GitHubRepoOutput) Update_commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringArrayOutput { return v.Update_commands }).(pulumi.StringArrayOutput)
}

func (o GitHubRepoOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubRepo) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubRepoInput)(nil)).Elem(), &GitHubRepo{})
	pulumi.RegisterOutputType(GitHubRepoOutput{})
}
