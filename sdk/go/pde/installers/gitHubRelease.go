// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package installers

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

type GitHubRelease struct {
	pulumi.CustomResourceState

	Asset_name         pulumi.StringPtrOutput   `pulumi:"asset_name"`
	Download_url       pulumi.StringOutput      `pulumi:"download_url"`
	Environment        pulumi.StringMapOutput   `pulumi:"environment"`
	Executable         pulumi.StringPtrOutput   `pulumi:"executable"`
	Install_commands   pulumi.StringArrayOutput `pulumi:"install_commands"`
	Interpreter        pulumi.StringArrayOutput `pulumi:"interpreter"`
	Org                pulumi.StringOutput      `pulumi:"org"`
	Release_version    pulumi.StringPtrOutput   `pulumi:"release_version"`
	Repo               pulumi.StringOutput      `pulumi:"repo"`
	Uninstall_commands pulumi.StringArrayOutput `pulumi:"uninstall_commands"`
	Update_commands    pulumi.StringArrayOutput `pulumi:"update_commands"`
	Version            pulumi.StringOutput      `pulumi:"version"`
}

// NewGitHubRelease registers a new resource with the given unique name, arguments, and options.
func NewGitHubRelease(ctx *pulumi.Context,
	name string, args *GitHubReleaseArgs, opts ...pulumi.ResourceOption) (*GitHubRelease, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Org == nil {
		return nil, errors.New("invalid value for required argument 'Org'")
	}
	if args.Repo == nil {
		return nil, errors.New("invalid value for required argument 'Repo'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitHubRelease
	err := ctx.RegisterResource("pde:installers:GitHubRelease", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitHubRelease gets an existing GitHubRelease resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitHubRelease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitHubReleaseState, opts ...pulumi.ResourceOption) (*GitHubRelease, error) {
	var resource GitHubRelease
	err := ctx.ReadResource("pde:installers:GitHubRelease", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitHubRelease resources.
type gitHubReleaseState struct {
}

type GitHubReleaseState struct {
}

func (GitHubReleaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitHubReleaseState)(nil)).Elem()
}

type gitHubReleaseArgs struct {
	Asset_name         *string  `pulumi:"asset_name"`
	Executable         *string  `pulumi:"executable"`
	Install_commands   []string `pulumi:"install_commands"`
	Org                string   `pulumi:"org"`
	Release_version    *string  `pulumi:"release_version"`
	Repo               string   `pulumi:"repo"`
	Uninstall_commands []string `pulumi:"uninstall_commands"`
	Update_commands    []string `pulumi:"update_commands"`
}

// The set of arguments for constructing a GitHubRelease resource.
type GitHubReleaseArgs struct {
	Asset_name         pulumi.StringPtrInput
	Executable         pulumi.StringPtrInput
	Install_commands   pulumi.StringArrayInput
	Org                pulumi.StringInput
	Release_version    pulumi.StringPtrInput
	Repo               pulumi.StringInput
	Uninstall_commands pulumi.StringArrayInput
	Update_commands    pulumi.StringArrayInput
}

func (GitHubReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitHubReleaseArgs)(nil)).Elem()
}

type GitHubReleaseInput interface {
	pulumi.Input

	ToGitHubReleaseOutput() GitHubReleaseOutput
	ToGitHubReleaseOutputWithContext(ctx context.Context) GitHubReleaseOutput
}

func (*GitHubRelease) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubRelease)(nil)).Elem()
}

func (i *GitHubRelease) ToGitHubReleaseOutput() GitHubReleaseOutput {
	return i.ToGitHubReleaseOutputWithContext(context.Background())
}

func (i *GitHubRelease) ToGitHubReleaseOutputWithContext(ctx context.Context) GitHubReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubReleaseOutput)
}

type GitHubReleaseOutput struct{ *pulumi.OutputState }

func (GitHubReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubRelease)(nil)).Elem()
}

func (o GitHubReleaseOutput) ToGitHubReleaseOutput() GitHubReleaseOutput {
	return o
}

func (o GitHubReleaseOutput) ToGitHubReleaseOutputWithContext(ctx context.Context) GitHubReleaseOutput {
	return o
}

func (o GitHubReleaseOutput) Asset_name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRelease) pulumi.StringPtrOutput { return v.Asset_name }).(pulumi.StringPtrOutput)
}

func (o GitHubReleaseOutput) Download_url() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubRelease) pulumi.StringOutput { return v.Download_url }).(pulumi.StringOutput)
}

func (o GitHubReleaseOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GitHubRelease) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

func (o GitHubReleaseOutput) Executable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRelease) pulumi.StringPtrOutput { return v.Executable }).(pulumi.StringPtrOutput)
}

func (o GitHubReleaseOutput) Install_commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitHubRelease) pulumi.StringArrayOutput { return v.Install_commands }).(pulumi.StringArrayOutput)
}

func (o GitHubReleaseOutput) Interpreter() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitHubRelease) pulumi.StringArrayOutput { return v.Interpreter }).(pulumi.StringArrayOutput)
}

func (o GitHubReleaseOutput) Org() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubRelease) pulumi.StringOutput { return v.Org }).(pulumi.StringOutput)
}

func (o GitHubReleaseOutput) Release_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRelease) pulumi.StringPtrOutput { return v.Release_version }).(pulumi.StringPtrOutput)
}

func (o GitHubReleaseOutput) Repo() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubRelease) pulumi.StringOutput { return v.Repo }).(pulumi.StringOutput)
}

func (o GitHubReleaseOutput) Uninstall_commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitHubRelease) pulumi.StringArrayOutput { return v.Uninstall_commands }).(pulumi.StringArrayOutput)
}

func (o GitHubReleaseOutput) Update_commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitHubRelease) pulumi.StringArrayOutput { return v.Update_commands }).(pulumi.StringArrayOutput)
}

func (o GitHubReleaseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubRelease) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubReleaseInput)(nil)).Elem(), &GitHubRelease{})
	pulumi.RegisterOutputType(GitHubReleaseOutput{})
}
