// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class GitHubRepo extends pulumi.CustomResource {
    /**
     * Get an existing GitHubRepo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GitHubRepo {
        return new GitHubRepo(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pde:installers:GitHubRepo';

    /**
     * Returns true if the given object is an instance of GitHubRepo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitHubRepo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitHubRepo.__pulumiType;
    }

    public /*out*/ readonly abs_folder_name!: pulumi.Output<string>;
    public readonly branch!: pulumi.Output<string | undefined>;
    public /*out*/ readonly environment!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly folder_name!: pulumi.Output<string | undefined>;
    public readonly install_commands!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly interpreter!: pulumi.Output<string[]>;
    public readonly org!: pulumi.Output<string>;
    public readonly repo!: pulumi.Output<string>;
    public readonly uninstall_commands!: pulumi.Output<string[] | undefined>;
    public readonly update_commands!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a GitHubRepo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitHubRepoArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.org === undefined) && !opts.urn) {
                throw new Error("Missing required property 'org'");
            }
            if ((!args || args.repo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repo'");
            }
            resourceInputs["branch"] = args ? args.branch : undefined;
            resourceInputs["folder_name"] = args ? args.folder_name : undefined;
            resourceInputs["install_commands"] = args ? args.install_commands : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["repo"] = args ? args.repo : undefined;
            resourceInputs["uninstall_commands"] = args ? args.uninstall_commands : undefined;
            resourceInputs["update_commands"] = args ? args.update_commands : undefined;
            resourceInputs["abs_folder_name"] = undefined /*out*/;
            resourceInputs["environment"] = undefined /*out*/;
            resourceInputs["interpreter"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        } else {
            resourceInputs["abs_folder_name"] = undefined /*out*/;
            resourceInputs["branch"] = undefined /*out*/;
            resourceInputs["environment"] = undefined /*out*/;
            resourceInputs["folder_name"] = undefined /*out*/;
            resourceInputs["install_commands"] = undefined /*out*/;
            resourceInputs["interpreter"] = undefined /*out*/;
            resourceInputs["org"] = undefined /*out*/;
            resourceInputs["repo"] = undefined /*out*/;
            resourceInputs["uninstall_commands"] = undefined /*out*/;
            resourceInputs["update_commands"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GitHubRepo.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a GitHubRepo resource.
 */
export interface GitHubRepoArgs {
    branch?: pulumi.Input<string>;
    folder_name?: pulumi.Input<string>;
    install_commands?: pulumi.Input<pulumi.Input<string>[]>;
    org: pulumi.Input<string>;
    repo: pulumi.Input<string>;
    uninstall_commands?: pulumi.Input<pulumi.Input<string>[]>;
    update_commands?: pulumi.Input<pulumi.Input<string>[]>;
}
